#include <cstdio>

class Bar
{
    Bar()
    : a{1}
    {

         class __lambda_8
         {
           public: inline /*constexpr */ void operator()() const
           {
             printf("%d\n", __this->a);
           }
           
           private:
           Bar * __this;
           
           public: __lambda_8(Bar * ___this)
           : __this{___this}
           {}
           
         };
         
                 __lambda_8 x = __lambda_8{this};
    }

    int a;

};

int main()
{
    int foo = 2;
    int b = 4;


     class __lambda_20
     {
       public: inline /*constexpr */ void operator()() const
       {
         printf("%d\n", foo);
       }
       
       private:
       int& foo;
       
       public: __lambda_20(int& _foo)
       : foo{_foo}
       {}
       
     };
     
         __lambda_20 lambda = __lambda_20{foo};

    lambda.operator()();


     class __lambda_24
     {
       public: inline /*constexpr */ void operator()() const
       {
         printf("%d\n", 1);
       }
       
     };
     
         __lambda_24 lambda2 = __lambda_24{};

    lambda2.operator()();


     class __lambda_28
     {
       public: inline /*constexpr */ int operator()()
       {
         printf("%d\n", ++foo);
         return foo;
       }
       
       private:
       int& foo;
       
       public: __lambda_28(int& _foo)
       : foo{_foo}
       {}
       
     };
     
         __lambda_28 lambda3 = __lambda_28{foo};

    lambda3.operator()();


     class __lambda_32
     {
       public: inline /*constexpr */ int operator()(int x) const
       {
         printf("%d\n", foo + x);
         return foo + x;
       }
       
       private:
       int& foo;
       
       public: __lambda_32(int& _foo)
       : foo{_foo}
       {}
       
     };
     
         __lambda_32 lambda4 = __lambda_32{foo};


     class __lambda_34
     {
       public: inline /*constexpr */ int operator()(const int x) const
       {
         printf("%d\n", foo + x);
         return foo + x;
       }
       
       private:
       int& foo;
       
       public: __lambda_34(int& _foo)
       : foo{_foo}
       {}
       
     };
     
         __lambda_34 lambda5 = __lambda_34{foo};


     class __lambda_36
     {
       public: inline /*constexpr */ int operator()(int & x, int b) const
       {
         printf("%d\n", foo + x);
         return foo + x + b;
       }
       
       private:
       int& foo;
       
       public: __lambda_36(int& _foo)
       : foo{_foo}
       {}
       
     };
     
         __lambda_36 lambda6 = __lambda_36{foo};


     class __lambda_38
     {
       public: inline /*constexpr */ int operator()(int & x, int b) const
       {
         printf("%d\n", foo + x);
         return foo + x + b;
       }
       
       private:
       int& foo;
       
       public: __lambda_38(int& _foo)
       : foo{_foo}
       {}
       
     };
     
         __lambda_38 lambda7 = __lambda_38{foo};
    lambda7.operator()(foo, 2);


     class __lambda_41
     {
       
       private:
       int& foo;
       
       public: __lambda_41(int& _foo)
       : foo{_foo}
       {}
       
     };
     
         __lambda_41 lambda71 = __lambda_41{foo};


     class __lambda_43
     {
       public: inline /*constexpr */ int operator()(int & x, const int & b, const int c) const
       {
         printf("%d\n", foo + x);
         return foo + x + b + c;
       }
       
       private:
       int& foo;
       
       public: __lambda_43(int& _foo)
       : foo{_foo}
       {}
       
     };
     
         __lambda_43 lambda73 = __lambda_43{foo};
    lambda73.operator()(foo, b, 44);


     class __lambda_46
     {
       public: inline /*constexpr */ int operator()(int & x, int b) const
       {
         printf("%d\n", foo + x);
         return foo + x + b;
       }
       
       private:
       int foo;
       int b;
       
       public: __lambda_46(int _foo, int _b)
       : foo{_foo}
, b{_b}
       {}
       
     };
     
         __lambda_46 lambda8 = __lambda_46{foo, b};


     class __lambda_48
     {
       public: inline /*constexpr */ int operator()(int & x, int b) const noexcept
       {
         printf("%d\n", foo + x);
         return foo + x + b;
       }
       
       private:
       int foo;
       int b;
       
       public: __lambda_48(int _foo, int _b)
       : foo{_foo}
, b{_b}
       {}
       
     };
     
         __lambda_48 lambda9 = __lambda_48{foo, b};
}
