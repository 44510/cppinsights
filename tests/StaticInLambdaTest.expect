#include <cstdio>
#include <cstring>
#include <new> // need this for after the transformation when a placement new is used

class Singleton
{
  
  public: 
  static Singleton & Instance();
  
  inline int Get() const
  {
    return this->mX;
  }
  
  inline void Set(int x)
  {
    this->mX = x;
  }
  
  
  private: 
  inline Singleton() noexcept = default;
  inline ~Singleton() noexcept
  {
  }
  
  int mX;
  public: 
};




static size_t counter = 0;


Singleton& Singleton::Instance()
{
  static Singleton singleton;

  static bool passed = true;

  return singleton;
}


class Bingleton
{
  
  public: 
  inline int Get() const
  {
    return this->mX;
  }
  
  inline void Set(int x)
  {
    this->mX = x;
  }
  
  inline Bingleton() noexcept = default;
  inline ~Bingleton() noexcept
  {
  }
  
  
  private: 
  int mX;
  public: 
  // inline constexpr Bingleton(const Bingleton &) noexcept = default;
};




int main()
{
    
  class __lambda_52_14
  {
    public: 
    inline Bingleton operator()(bool c) const
    {
      static Bingleton bb = Bingleton();
      if(c) {
        return Bingleton(bb);
      }
      
      return Bingleton(bb);
    }
    
    using retType_52_14 = Bingleton (*)(bool);
    inline /*constexpr */ operator retType_52_14 () const noexcept
    {
      return __invoke;
    };
    
    private: 
    static inline Bingleton __invoke(bool c)
    {
      static Bingleton bb = Bingleton();
      if(c) {
        return Bingleton(bb);
      }
      
      return Bingleton(bb);
    }
    
    
  };
  
  __lambda_52_14 x = __lambda_52_14{};
    
  class __lambda_62_14
  {
    public: 
    inline Bingleton * operator()(bool c) const
    {
      static Bingleton bb = Bingleton();
      if(c) {
        return &bb;
      }
      
      return &bb;
    }
    
    using retType_62_14 = Bingleton *(*)(bool);
    inline /*constexpr */ operator retType_62_14 () const noexcept
    {
      return __invoke;
    };
    
    private: 
    static inline Bingleton * __invoke(bool c)
    {
      static Bingleton bb = Bingleton();
      if(c) {
        return &bb;
      }
      
      return &bb;
    }
    
    
  };
  
  __lambda_62_14 y = __lambda_62_14{};
}


