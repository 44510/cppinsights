#include <map>
#include <set>

template <typename T> void foo(T & t)
{
    auto it = t.find(42);
}

/* First instantiated from: AutoHandler2Test.cpp:14 */
#ifdef INSIGHTS_USE_TEMPLATE
template<>
void foo<std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int> > > >(std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int> > > & t)
{
  std::__map_iterator<std::__tree_iterator<std::__value_type<int, int>, std::__tree_node<std::__value_type<int, int>, void *> *, long> > it = t.find(42);
}
#endif


/* First instantiated from: AutoHandler2Test.cpp:15 */
#ifdef INSIGHTS_USE_TEMPLATE
template<>
void foo<std::set<int, std::less<int>, std::allocator<int> > >(std::set<int, std::less<int>, std::allocator<int> > & t)
{
  std::__tree_const_iterator<int, std::__tree_node<int, void *> *, long> it = t.find(42);
}
#endif



int main() {
std::map<int, int> m;
std::set<int> s;

foo(m);
foo(s);
}
