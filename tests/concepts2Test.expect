// cmdline:-std=c++2a
template<typename T>
concept default_constructible = requires { T{}; T(); };


// N4842 p. 181 9.3.3.5 /19: An abbreviated function template can have a template-head. The invented template-parameters are appended to the template-parameter-list after the explicitly declared template-parameters. [Example:
template<typename T>
void fun(T t, default_constructible auto x)
{
}

/* First instantiated from: concepts2Test.cpp:32 */
#ifdef INSIGHTS_USE_TEMPLATE
template<>
void fun<int, int>(int t, int x)
{
}
#endif


class AutoAsParameter
{
  
  public: 
  template<typename T, default_constructible type_parameter_0_1>
  inline void fun(T t, type_parameter_0_1 x)
  {
  }
  
  /* First instantiated from: concepts2Test.cpp:36 */
  #ifdef INSIGHTS_USE_TEMPLATE
  template<>
  inline void fun<int, int>(int t, int x)
  {
  }
  #endif
  
};



class ConstraintTemplateTypeParameter
{
  
  public: 
  template<typename T, default_constructible X>
  inline void fun(T t, X x)
  {
  }
  
  /* First instantiated from: concepts2Test.cpp:40 */
  #ifdef INSIGHTS_USE_TEMPLATE
  template<>
  inline void fun<int, int>(int t, int x)
  {
  }
  #endif
  
};



int main()
{
  int x = 4;
  fun(2, x);
  AutoAsParameter a = {};
  a.fun<int, int>(2, x);
  ConstraintTemplateTypeParameter c = {};
  c.fun<int, int>(2, x);
}

