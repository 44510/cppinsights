#define INSIGHTS_USE_TEMPLATE

#include <cstddef>
#include <type_traits>

namespace details {
  template<class T>
  struct remove_reference      { typedef T type; };
  
  #ifdef INSIGHTS_USE_TEMPLATE
  template<>
  struct remove_reference<int [16]>
  {
    using type = int [16];
  };
  
  #endif
  
  template<class T>
struct remove_reference<T &>
{
  using type = T;
};


  template<class T>
struct remove_reference<T &&>
{
  using type = T;
};



  template<class T, size_t N = 0>
  struct extent
  {
    static constexpr size_t value = N;

    static_assert(N != 0, "Arrays only");
  };
  
  #ifdef INSIGHTS_USE_TEMPLATE
  template<>
  struct extent<int [16], 0>
  {
    inline static constexpr const size_t value = 16ul;
    
    /* PASSED: static_assert(16ul != 0, "Arrays only"); */
  };
  
  #endif
  

  template<class T, size_t I>
struct extent<T [I], 0>
{
  inline static constexpr const size_t value = I;
  
  /* PASSED: static_assert(I != 0, "Arrays only"); */
};



}  // namespace details

#define ARRAY_SIZE(var_x)                             \
  details::extent<typename details::remove_reference< \
    decltype(var_x)>::type>::value

class B
{
  public: 
  // inline constexpr B() noexcept = default;
  // inline ~B() = default;
  // inline constexpr B(const B &) = default;
  // inline constexpr B(B &&) = default;
};



class E
{
  public: 
  // inline constexpr E() noexcept = default;
  // inline ~E() = default;
  // inline constexpr E(const E &) = default;
  // inline constexpr E(E &&) = default;
};



template<typename T>
class S : public B
{
};

/* First instantiated from: TemplateExpansion2Test.cpp:59 */
#ifdef INSIGHTS_USE_TEMPLATE
template<>
class S<int> : public B
{
  public: 
  // inline constexpr S() noexcept = default;
  // inline constexpr S(const S<int> &) = default;
  // inline constexpr S(S<int> &&) = default;
};

#endif


/* First instantiated from: TemplateExpansion2Test.cpp:48 */
#ifdef INSIGHTS_USE_TEMPLATE
template<>
class S<double> : public B
{
  public: 
  // inline constexpr S() noexcept = default;
  // inline ~S() = default;
  // inline constexpr S(const S<double> &) = default;
  // inline constexpr S(S<double> &&) = default;
};

#endif


template<typename T>
class Y : public S<T>, public E
{
};

/* First instantiated from: TemplateExpansion2Test.cpp:61 */
#ifdef INSIGHTS_USE_TEMPLATE
template<>
class Y<double> : public S<double>, public E
{
  public: 
  // inline constexpr Y() noexcept = default;
  // inline constexpr Y(const Y<double> &) = default;
  // inline constexpr Y(Y<double> &&) = default;
};

#endif



void test()
{
  int buffer[16] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  const unsigned long & xx = details::extent<int [16], 0>::value;
  S<int> s = S<int>();
  Y<double> y = Y<double>();
}



int main()
{
}


