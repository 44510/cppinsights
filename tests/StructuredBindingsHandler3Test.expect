//#include <tuple>
using size_t = decltype(sizeof(0));
// Without this the compiler does not know a symbol tuple_size and hence can/will not decompose
namespace std
{
  template<typename T>
  struct tuple_size;
  
}
namespace std
{
  template<size_t , typename type_parameter_0_1>
  struct tuple_element;
  /* First instantiated from: StructuredBindingsHandler3Test.cpp:17 */
  #ifdef INSIGHTS_USE_TEMPLATE
  template<>
  struct tuple_element<0, constant::Q>
  {
    using type = int;
  };
  
  #endif
  /* First instantiated from: StructuredBindingsHandler3Test.cpp:17 */
  #ifdef INSIGHTS_USE_TEMPLATE
  template<>
  struct tuple_element<1, constant::Q>
  {
    using type = int;
  };
  
  #endif
  /* First instantiated from: StructuredBindingsHandler3Test.cpp:17 */
  #ifdef INSIGHTS_USE_TEMPLATE
  template<>
  struct tuple_element<2, constant::Q>
  {
    using type = int;
  };
  
  #endif
  
} // expected-note 2{{here}}


namespace constant
{
  struct Q
  {
    // inline constexpr Q() noexcept = default;
    // inline constexpr Q(const Q &) noexcept = default;
  };
  
  template<int N>
  inline constexpr int get(Q &&)
  {
    return N * N;
  }
  
  /* First instantiated from: StructuredBindingsHandler3Test.cpp:17 */
  #ifdef INSIGHTS_USE_TEMPLATE
  template<>
  inline constexpr int get<0>(Q &&)
  {
    return 0 * 0;
  }
  #endif
  
  
  /* First instantiated from: StructuredBindingsHandler3Test.cpp:17 */
  #ifdef INSIGHTS_USE_TEMPLATE
  template<>
  inline constexpr int get<1>(Q &&)
  {
    return 1 * 1;
  }
  #endif
  
  
  /* First instantiated from: StructuredBindingsHandler3Test.cpp:17 */
  #ifdef INSIGHTS_USE_TEMPLATE
  template<>
  inline constexpr int get<2>(Q &&)
  {
    return 2 * 2;
  }
  #endif
  
  
}
template<>
struct std::tuple_size<constant::Q>
{
  static const int value = 3;
};


template<size_t N>
struct std::tuple_element<N, constant::Q>
{
  using type = int;
};


namespace constant
{
  Q q = Q();
  Q __q17 = Q(q);
  std::tuple_element<0, Q>::type a = get<0UL>(__q17);
  std::tuple_element<1, Q>::type b = get<1UL>(__q17);
  std::tuple_element<2, Q>::type c = get<2UL>(__q17);
  std::tuple_element<0, Q>::type && a = get<0UL>();
  std::tuple_element<1, Q>::type && b = get<1UL>();
  std::tuple_element<2, Q>::type && c = get<2UL>();
  inline constexpr bool f()
  {
    Q __q19 = Q(q);
    std::tuple_element<0, Q>::type a = get<0UL>(__q19);
    std::tuple_element<1, Q>::type b = get<1UL>(__q19);
    std::tuple_element<2, Q>::type c = get<2UL>(__q19);
    return ((a == 0) && (b == 1)) && (c == 4);
  }
  inline constexpr int g()
  {
    int * p = nullptr;
    {
      Q __q26 = Q(q);
      std::tuple_element<0, Q>::type a = get<0UL>(__q26);
      std::tuple_element<1, Q>::type b = get<1UL>(__q26);
      std::tuple_element<2, Q>::type c = get<2UL>(__q26);
      p = &c;
    };
    return *p;
  }
  
}
