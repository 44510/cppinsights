#include <string>
#include <unordered_set>

class Customer
{
  std::basic_string<char> name;
  
  public: 
  inline Customer(const std::basic_string<char> & n)
  : name{std::basic_string<char>(n)}
  {
  }
  
  inline std::basic_string<char> getName() const
  {
    return std::basic_string<char>(this->name);
  }
  
  // inline ~Customer() noexcept = default;
};



struct CustomerEq
{
  inline bool operator()(const Customer & c0, const Customer & c1) const
  {
    return std::operator==(c0.getName(), c1.getName());
  }
  
};



struct CustomerHash
{
  inline std::size_t operator()(const Customer & c) const
  {
    return std::hash<std::basic_string<char> >().operator()(c.getName());
  }
  
};



template<typename ... Bases>
struct ManyParentsWithOperator : Bases...{
using Bases::operator()...;//C++17
};

/* First instantiated from: type_traits:1561 */
#ifdef INSIGHTS_USE_TEMPLATE
template<>
struct ManyParentsWithOperator<CustomerHash, CustomerEq> : public CustomerHash, public CustomerEq
{
  using CustomerHash::operator();
  // inline std::size_t CustomerHash::operator()(const Customer & c) const;
  
  using CustomerEq::operator();
  // inline bool CustomerEq::operator()(const Customer & c0, const Customer & c1) const;
  
};

#endif


/* First instantiated from: type_traits:1561 */
#ifdef INSIGHTS_USE_TEMPLATE
template<>
struct ManyParentsWithOperator<CustomerEq, CustomerHash> : public CustomerEq, public CustomerHash
{
  using CustomerEq::operator();
  // inline bool CustomerEq::operator()(const Customer & c0, const Customer & c1) const;
  
  using CustomerHash::operator();
  // inline std::size_t CustomerHash::operator()(const Customer & c) const;
  
};

#endif


int main()
{
  std::unordered_set<Customer, CustomerHash, CustomerEq> set1 = std::unordered_set<Customer, CustomerHash, CustomerEq, std::allocator<Customer> >();
  std::unordered_set<Customer, ManyParentsWithOperator<CustomerHash, CustomerEq>, ManyParentsWithOperator<CustomerHash, CustomerEq> > set2 = std::unordered_set<Customer, ManyParentsWithOperator<CustomerHash, CustomerEq>, ManyParentsWithOperator<CustomerHash, CustomerEq>, std::allocator<Customer> >();
  std::unordered_set<Customer, ManyParentsWithOperator<CustomerEq, CustomerHash>, ManyParentsWithOperator<CustomerEq, CustomerHash> > set3 = std::unordered_set<Customer, ManyParentsWithOperator<CustomerEq, CustomerHash>, ManyParentsWithOperator<CustomerEq, CustomerHash>, std::allocator<Customer> >();
  set1.emplace("Test");
  set2.emplace("Test");
  set3.emplace("Test");
  return 0;
}

