template <template <typename> class... Templates>
struct template_tuple {};
/* First instantiated from: TemplateExpansionTest.cpp:9 */
#ifdef INSIGHTS_USE_TEMPLATE
class template_tuple<identity>
{
  
};

#endif

template <typename T>
struct identity {};
template <template <typename> class... Templates>
template_tuple<Templates...> f7() {}

/* First instantiated from: TemplateExpansionTest.cpp:9 */
#ifdef INSIGHTS_USE_TEMPLATE
template<>
template_tuple<identity> f7<identity>()
{
}
#endif


void foo2() {
  f7<identity>();
}


  template<typename> class A { };
  template<template<typename> class ...> class B { };
  /* First instantiated from: TemplateExpansionTest.cpp:27 */
  #ifdef INSIGHTS_USE_TEMPLATE
  class B<Test, Test>
  {
    
  };
  
  #endif
  
  int foo();

  template<typename> class testType { };
  /* First instantiated from: TemplateExpansionTest.cpp:43 */
  #ifdef INSIGHTS_USE_TEMPLATE
  class testType<int>
  {
    
  };
  
  #endif
  

  template<int fp(void)> class testDecl { };
  /* First instantiated from: TemplateExpansionTest.cpp:45 */
  #ifdef INSIGHTS_USE_TEMPLATE
  class testDecl</* INSIGHTS-TODO: CodeGenerator.cpp:964 stmt: Function */>
  {
    
  };
  
  #endif
  
  /* First instantiated from: TemplateExpansionTest.cpp:46 */
  #ifdef INSIGHTS_USE_TEMPLATE
  class testDecl<int (*)()>
  {
    
  };
  
  #endif
  

  template<int> class testIntegral { };
  /* First instantiated from: TemplateExpansionTest.cpp:48 */
  #ifdef INSIGHTS_USE_TEMPLATE
  class testIntegral<2>
  {
    
  };
  
  #endif
  

  template<template<typename> class> class testTemplate { };
  template class testTemplate<A>;

  template<template<typename> class ...T> class C {
    B<T...> testTemplateExpansion;
  };
  /* First instantiated from: TemplateExpansionTest.cpp:41 */
  #ifdef INSIGHTS_USE_TEMPLATE
  class C<Test, Test>
  {
    
  };
  
  #endif
  

  template<int, int = 0> class testExpr{};
  /* First instantiated from: TemplateExpansionTest.cpp:50 */
  #ifdef INSIGHTS_USE_TEMPLATE
  class testExpr<4, 1>
  {
    
  };
  
  #endif
  

  template<int, int ...> class testPack { };
  /* First instantiated from: TemplateExpansionTest.cpp:52 */
  #ifdef INSIGHTS_USE_TEMPLATE
  class testPack<0, 1, 2, 4>
  {
    
  };
  
  #endif
  


template<typename T>
struct Test {};

int main() {


    C<Test, Test> te;

    testType<int> type;
    
    testDecl<foo> a{};
    testDecl<nullptr> b{};

    testIntegral<2> integral;

    testExpr<2*2, 1> expr;

    testPack<0, 1, 2, 4> pack;
}

