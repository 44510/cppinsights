/*************************************************************************************
 * NOTE: The coroutine transformation you've enabled is a hand coded transformation! *
 *       Most of it is _not_ present in the AST. What you see is an approximation.   *
 *************************************************************************************/
// cmdline:-std=c++20
// cmdlineinsights:-edu-show-coroutine-transformation

#include <coroutine>
#include <exception> // std::terminate
#include <new>
#include <utility>

struct Test
{
  int i;
  inline constexpr Test() noexcept = default;
  inline Test(int)
  : i{}
  {
  }
  
  inline ~Test() noexcept
  {
  }
  
  // inline Test & operator=(const Test &) noexcept = default;
};



template <typename T> struct generator {
  struct promise_type {
    T current_value{};
    std::suspend_always yield_value(T value) {
      current_value = value;
      return {};
    }
    std::suspend_always initial_suspend() { return {}; }
    std::suspend_always final_suspend() noexcept { return {}; }
    generator get_return_object() { return generator{this}; };
    void unhandled_exception() { std::terminate(); }
    void return_value(T v) { current_value = v; }
  };

  generator(generator &&rhs) : p{std::exchange(rhs.p, nullptr)} {}
  ~generator() { if (p) { p.destroy(); } }

private:
  explicit generator(promise_type* _p)
      : p{std::coroutine_handle<promise_type>::from_promise(*_p)} {}

  std::coroutine_handle<promise_type> p;
};

/* First instantiated from: EduCoroutineWithDtorTest.cpp:49 */
#ifdef INSIGHTS_USE_TEMPLATE
template<>
struct generator<Test>
{
  struct promise_type
  {
    Test current_value = Test{};
    inline std::suspend_always yield_value(Test value);
    
    inline std::suspend_always initial_suspend()
    {
      return {};
    }
    
    inline std::suspend_always final_suspend() noexcept
    {
      return {};
    }
    
    inline generator<Test> get_return_object()
    {
      return generator<Test>{this};
    }
    
    inline void unhandled_exception()
    {
      std::terminate();
    }
    
    inline void return_value(Test v)
    {
      this->current_value.operator=(v);
    }
    
    // inline ~promise_type() noexcept = default;
    // inline constexpr promise_type() noexcept = default;
  };
  
  inline generator(generator<Test> && rhs)
  : p{{std::exchange(rhs.p, nullptr)}}
  {
  }
  
  inline ~generator() noexcept
  {
    if(static_cast<bool>(this->p.operator bool())) {
      this->p.destroy();
    } 
    
  }
  
  
  private: 
  inline explicit generator(promise_type * _p)
  : p{std::coroutine_handle<promise_type>::from_promise(*_p)}
  {
  }
  
  std::coroutine_handle<promise_type> p;
  public: 
  // inline constexpr generator(const generator<Test> &) /* noexcept */ = delete;
  // inline generator<Test> & operator=(const generator<Test> &) /* noexcept */ = delete;
};

#endif


template <typename T>
generator<T> fun() {
  co_return 2;
}

struct __fun_TestFrame
{
  void (*resume_fn)(__fun_TestFrame *);
  void (*destroy_fn)(__fun_TestFrame *);
  std::__coroutine_traits_sfinae<generator<Test> >::promise_type __promise;
  int __suspend_index;
  bool __initial_await_suspend_called;
  std::suspend_always __suspend_43_14;
  std::suspend_always __suspend_43_14_1;
};

/* First instantiated from: EduCoroutineWithDtorTest.cpp:49 */
#ifdef INSIGHTS_USE_TEMPLATE
template<>
generator<Test> fun<Test>()
{
  /* Allocate the frame including the promise */
  __fun_TestFrame * __f = reinterpret_cast<__fun_TestFrame *>(operator new(__builtin_coro_size()));
  __f->__suspend_index = 0;
  __f->__initial_await_suspend_called = false;
  
  /* Construct the promise. */
  new (&__f->__promise)std::__coroutine_traits_sfinae<generator<Test> >::promise_type{};
  
  generator<Test> __coro_gro = __f->__promise.get_return_object() /* NRVO variable */;
  
  /* Forward declare the resume and destroy function. */
  void __fun_TestResume(__fun_TestFrame * __f);
  void __fun_TestDestroy(__fun_TestFrame * __f);
  
  /* Assign the resume and destroy function pointers. */
  __f->resume_fn = &__fun_TestResume;
  __f->destroy_fn = &__fun_TestDestroy;
  
  /* Call the made up function with the coroutine body for initial suspend.
     This function will be called subsequently by coroutine_handle<>::resume()
     which calls __builtin_coro_resume(__handle_) */
  __fun_TestResume(__f);
  
  
  return __coro_gro;
}

/* This function invoked by coroutine_handle<>::resume() */
void __fun_TestResume(__fun_TestFrame * __f)
{
  try 
  {
    /* Create a switch to get to the correct resume point */
    switch(__f->__suspend_index) {
      case 0: break;
      case 1: goto __resume_fun_Test_1;
    }
    
    /* co_await EduCoroutineWithDtorTest.cpp:43 */
    __f->__suspend_43_14 = __f->__promise.initial_suspend();
    if(!__f->__suspend_43_14.await_ready()) {
      __f->__suspend_43_14.await_suspend(std::coroutine_handle<generator<Test>::promise_type>::from_address(static_cast<void *>(__f)).operator coroutine_handle());
      __f->__suspend_index = 1;
      __f->__initial_await_suspend_called = true;
      return;
    } 
    
    __resume_fun_Test_1:
    __f->__suspend_43_14.await_resume();
    /* co_return EduCoroutineWithDtorTest.cpp:44 */
    __f->__promise.return_value(Test(2));
    goto __final_suspend;
  } catch(...) {
    if(!__f->__initial_await_suspend_called) {
      throw ;
    } 
    
    __f->__promise.unhandled_exception();
  }
  
  __final_suspend:
  
  /* co_await EduCoroutineWithDtorTest.cpp:43 */
  __f->__suspend_43_14_1 = __f->__promise.final_suspend();
  if(!__f->__suspend_43_14_1.await_ready()) {
    __f->__suspend_43_14_1.await_suspend(std::coroutine_handle<generator<Test>::promise_type>::from_address(static_cast<void *>(__f)).operator coroutine_handle());
  } 
  
  ;
}

/* This function invoked by coroutine_handle<>::destroy() */
void __fun_TestDestroy(__fun_TestFrame * __f)
{
  /* destroy all variables with dtors */
  __f->~__fun_TestFrame();
  /* Deallocating the coroutine frame */
  operator delete(__builtin_coro_free(static_cast<void *>(__f)));
}

#endif



int main()
{
  generator<Test> s = fun<Test>();
  return 0;
}


