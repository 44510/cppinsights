template<unsigned int TA>
struct SA
{
  SA(const int & PA);
  
  ~SA();
  
  bool Test();
  
  int nt;
};

/* First instantiated from: LambdaHandlerVLATest.cpp:41 */
#ifdef INSIGHTS_USE_TEMPLATE
template<>
struct SA<2>
{
  inline SA(const int & PA)
  {
    float e[this->nt];
        
    class __lambda_22_8
    {
      public: 
      inline /*constexpr */ bool operator()(int i, int j) const
      {
        return e[i] < e[j];
      }
      
      private: 
      unsigned long;
      float (&e)[this->nt];
      
      public:
      __lambda_22_8(float (&_e)[this->nt])
      : e{_e}
      {}
      
    };
    
    test(__lambda_22_8{e});
  }
  
  ~SA() noexcept
  {
  }
  
  bool Test();
  
  int nt;
};

#endif

template<typename TB>
inline void test(TB aa)
{
}

/* First instantiated from: LambdaHandlerVLATest.cpp:22 */
#ifdef INSIGHTS_USE_TEMPLATE
template<>
inline void test<__lambda_22_8>(__lambda_22_8 aa)
{
}
#endif


template<unsigned int TA>
inline SA<TA>::SA(const int & PA)
{
  float e[this->nt];
    
  class __lambda_22_8
  {
    public: 
    inline auto operator()(int i, int j) const
    {
      return e[i] < e[j];
    }
    
    private: 
    float (&e)[this->nt];
    
    public:
    __lambda_22_8(float (&_e)[this->nt])
    : e{_e}
    {}
    
  };
  
  test(__lambda_22_8{e});
}


template<unsigned int TA>
SA<TA>::~SA()
{
}


template<unsigned int TA>
inline bool SA<TA>::Test()
{
  return false;
}


int main()
{
  int d;
  SA<2> iso = SA<2>(d);
  return 0;
}
