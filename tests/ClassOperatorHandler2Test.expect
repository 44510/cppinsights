#include <iostream>

void f(int&&)
{
    std::operator<<(std::operator<<(std::cout, "hello"), "&&\n");
}
void f(int&)
{
    std::operator<<(std::operator<<(std::operator<<(std::operator<<(std::cout, "bello"), "&\n"), "world"), "\n");
}

class Foo
{
public:
    Foo(int x)
    : mX{x}
    {
    }

    operator const int() const { return mX; }
    Foo operator++(int)
    {
        Foo old(*this) /* NRVO variable */;
        printf("  ======\n");
        ++mX;
        printf("  ++++++\n");
        return old;
    }
    Foo& operator++()
    {
        ++mX;
        return *this;
    }

    Foo operator--(int)
    {
        Foo old(*this) /* NRVO variable */;
        printf("  ======\n");
        --mX;
        printf("  ++++++\n");
        return old;
    }
    Foo& operator--()
    {
        --mX;
        return *this;
    }
    
    int Get() const { return mX; }

private:
    int mX;
/* public: inline constexpr Foo(const Foo &) noexcept; */
/* public: inline constexpr Foo(Foo &&) noexcept; */
/* public: inline ~Foo() noexcept; */
};

int main()
{
         
     class __lambda_60_5
     {
       public: inline void operator()() const
       {
         int n = 10;
         f(n);
         f(42);
         f(int{  });
         Foo f = Foo(1);
         f.operator++();
         f.operator++(0);
         f.operator--();
         f.operator--(0);
         printf("%d\n", f.operator++(0));
         printf("%d %d\n", f.operator++(0), 1);
         printf("%d\n", f.operator--(0));
         printf("%d %d\n", f.operator--(0), 1);
         Foo * ff = &f;
         printf("%d\n", ff->Get());
         ++ff;
         ff++;
         ++++ff;
         --ff;
         ff--;
         ----ff;
         printf("%d\n", f.Get());
       }
       
     } __lambda_60_5{};
     
     __lambda_60_5.operator()();


    int n = 10;
    f(n);      // identifier of a variable is almost always an lvalue
    f(42);     // 42 is a prvalue (like most literals)
    f(int{});  // int{} is a prvalue

    Foo f(1);

    f.operator++();
    f.operator++(0);

    f.operator--();
    f.operator--(0);

    printf("%d\n", f.operator++(0));
    printf("%d %d\n", f.operator++(0), 1);

    printf("%d\n", f.operator--(0));
    printf("%d %d\n", f.operator--(0), 1);
    
    Foo* ff = &f;

    printf("%d\n", ff->Get());

    ++ff;
    ff++;
    ++++ff;

    --ff;
    ff--;
    ----ff;
    
    printf("%d\n", f.Get());

}
