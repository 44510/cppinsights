class Test
{
public:
    Test(int x)
    : mX{x}
    {
    }

    //    void operator++() { mX++; }
    Test operator++()
    {
        mX++;
        return *this;
    }

    Test operator++(int)
    {
        Test tmp{*this} /* NRVO variable */;
        mX++;

        return tmp;
    }

    Test operator--()
    {
        mX--;
        return *this;
    }
    
    Test operator--(int)
    {
        Test tmp{*this} /* NRVO variable */;
        mX--;

        return tmp;
    }
    
    Test& operator+=(const Test& rhs)
    {
        mX += rhs.mX;

        return *this;
    }

    Test& operator<<(const Test& rhs)
    {
        mX += rhs.mX;

        return *this;
    }

    bool operator>(const Test& rhs) { return mX > rhs.mX; }

    bool operator>=(const Test& rhs) { return mX >= rhs.mX; }

    Test& operator[](const int index) { return *this; };

private:
    int mX;
/* public: inline constexpr Test(const Test &) noexcept; */
/* public: inline constexpr Test(Test &&) noexcept; */
/* public: inline ~Test() noexcept; */
};

class Fest
{
public:
    Fest(int x)
    : mX{x}
    {
    }

    int  Get() const { return mX; }
    int& Get() { return mX; }

private:
    int mX;
/* public: inline constexpr Fest(const Fest &); */
/* public: inline constexpr Fest(Fest &&); */
};


namespace Hello {
    namespace Bello {
class Fest
{
public:
    Fest(int x)
    : mX{x}
    {
    }

    int  Get() const { return mX; }
    int& Get() { return mX; }

    Fest& operator<<(const Fest& rhs)
    {
        mX += rhs.mX;

        return *this;
    }


private:
    int mX;
/* public: inline constexpr Fest(const Hello::Bello::Fest &); */
/* public: inline constexpr Fest(Hello::Bello::Fest &&); */
};

inline bool operator<(const Fest& LHS, const Fest& RHS)
{
    return LHS.Get() < RHS.Get();
}

static Fest sF{3};
}
}

inline bool operator<(const Fest& LHS, const Fest& RHS)
{
    return LHS.Get() < RHS.Get();
}

int main()
{
    Test t1{2};

    t1.operator++(0);
    t1.operator--(0);

    t1.operator++();
    t1.operator--();

    t1.operator++().operator++();

    Test t2{5};

    t1.operator+=(t2);

    if(t1.operator>(t2)) {
       return 1;
     }
     

    if(t1.operator>=(t2)) {
       return 3;
     }
     

    Test& t3 = t1.operator[](0);

    Test t4 = t1;
    t4.operator<<(t1).operator<<(t2).operator<<(t3);

    Test* t5 = new Test(2);

    (*t5).operator++(0);
    Test tt5 = *t5++;  // increment pointer and after that dereference it

    (*t5).operator++();
    (*t5).operator++().operator++();

    Fest f1{2};
    Fest f2{3};

    if(operator<(f1, f2)) {
       return 22;
     }
     

    Hello::Bello::Fest f3{3};
    Hello::Bello::Fest f4{3};

    if(Hello::Bello::operator<(f3, f4)) {
       return 44;
     }
     

    Hello::Bello::sF.operator<<(Hello::Bello::sF).operator<<(Hello::Bello::sF);
}
