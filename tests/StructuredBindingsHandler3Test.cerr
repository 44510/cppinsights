.tmp.cpp:85:46: error: no matching function for call to 'get'
std::tuple_element<0, constant::Q>::type a = constant::get<0ul>(constant::__q17);
                                             ^~~~~~~~~~~~~~~~~~
.tmp.cpp:46:33: note: candidate function template not viable: no known conversion from 'constant::Q' to 'constant::Q &&' for 1st argument
  template<int N> constexpr int get(Q &&) { return N * N; }
                                ^
.tmp.cpp:86:46: error: no matching function for call to 'get'
std::tuple_element<1, constant::Q>::type b = constant::get<1ul>(constant::__q17);
                                             ^~~~~~~~~~~~~~~~~~
.tmp.cpp:46:33: note: candidate function template not viable: no known conversion from 'constant::Q' to 'constant::Q &&' for 1st argument
  template<int N> constexpr int get(Q &&) { return N * N; }
                                ^
.tmp.cpp:87:65: error: use of undeclared identifier 'conststd'
std::tuple_element<2, constant::Q>::type c = constant::get<2ul>(conststd::tuple_element<0, constant::Q>::type && a = constant::get<0ul>(constant::);
                                                                ^
.tmp.cpp:87:103: error: expected '(' for function-style cast or type construction
std::tuple_element<2, constant::Q>::type c = constant::get<2ul>(conststd::tuple_element<0, constant::Q>::type && a = constant::get<0ul>(constant::);
                                                                                           ~~~~~~~~~~~^
.tmp.cpp:87:106: error: no member named 'type' in the global namespace
std::tuple_element<2, constant::Q>::type c = constant::get<2ul>(conststd::tuple_element<0, constant::Q>::type && a = constant::get<0ul>(constant::);
                                                                                                       ~~^
.tmp.cpp:87:147: error: expected unqualified-id
std::tuple_element<2, constant::Q>::type c = constant::get<2ul>(conststd::tuple_element<0, constant::Q>::type && a = constant::get<0ul>(constant::);
                                                                                                                                                  ^
.tmp.cpp:88:36: error: expected '(' for function-style cast or type construction
ntstd::tuple_element<1, constant::Q>::type && b = constant::get<1ul>(constant::);
                        ~~~~~~~~~~~^
.tmp.cpp:88:39: error: no member named 'type' in the global namespace
ntstd::tuple_element<1, constant::Q>::type && b = constant::get<1ul>(constant::);
                                    ~~^
.tmp.cpp:88:80: error: expected unqualified-id
ntstd::tuple_element<1, constant::Q>::type && b = constant::get<1ul>(constant::);
                                                                               ^
.tmp.cpp:89:36: error: expected '(' for function-style cast or type construction
:_std::tuple_element<2, constant::Q>::type && c = constant::get<2ul>(constant::);
                        ~~~~~~~~~~~^
.tmp.cpp:89:39: error: no member named 'type' in the global namespace
:_std::tuple_element<2, constant::Q>::type && c = constant::get<2ul>(constant::);
                                    ~~^
.tmp.cpp:89:80: error: expected unqualified-id
:_std::tuple_element<2, constant::Q>::type && c = constant::get<2ul>(constant::);
                                                                               ^
.tmp.cpp:96:50: error: no matching function for call to 'get'
    std::tuple_element<0, constant::Q>::type a = constant::get<0ul>(__q20);
                                                 ^~~~~~~~~~~~~~~~~~
.tmp.cpp:46:33: note: candidate function template not viable: no known conversion from 'constant::Q' to 'constant::Q &&' for 1st argument
  template<int N> constexpr int get(Q &&) { return N * N; }
                                ^
.tmp.cpp:97:50: error: no matching function for call to 'get'
    std::tuple_element<1, constant::Q>::type b = constant::get<1ul>(__q20);
                                                 ^~~~~~~~~~~~~~~~~~
.tmp.cpp:46:33: note: candidate function template not viable: no known conversion from 'constant::Q' to 'constant::Q &&' for 1st argument
  template<int N> constexpr int get(Q &&) { return N * N; }
                                ^
.tmp.cpp:98:50: error: no matching function for call to 'get'
    std::tuple_element<2, constant::Q>::type c = constant::get<2ul>(__q20);
                                                 ^~~~~~~~~~~~~~~~~~
.tmp.cpp:46:33: note: candidate function template not viable: no known conversion from 'constant::Q' to 'constant::Q &&' for 1st argument
  template<int N> constexpr int get(Q &&) { return N * N; }
                                ^
.tmp.cpp:96:46: error: variables defined in a constexpr function must be initialized
    std::tuple_element<0, constant::Q>::type a = constant::get<0ul>(__q20);
                                             ^
.tmp.cpp:108:52: error: no matching function for call to 'get'
      std::tuple_element<0, constant::Q>::type a = constant::get<0ul>(__q27);
                                                   ^~~~~~~~~~~~~~~~~~
.tmp.cpp:46:33: note: candidate function template not viable: no known conversion from 'constant::Q' to 'constant::Q &&' for 1st argument
  template<int N> constexpr int get(Q &&) { return N * N; }
                                ^
.tmp.cpp:109:52: error: no matching function for call to 'get'
      std::tuple_element<1, constant::Q>::type b = constant::get<1ul>(__q27);
                                                   ^~~~~~~~~~~~~~~~~~
.tmp.cpp:46:33: note: candidate function template not viable: no known conversion from 'constant::Q' to 'constant::Q &&' for 1st argument
  template<int N> constexpr int get(Q &&) { return N * N; }
                                ^
.tmp.cpp:110:52: error: no matching function for call to 'get'
      std::tuple_element<2, constant::Q>::type c = constant::get<2ul>(__q27);
                                                   ^~~~~~~~~~~~~~~~~~
.tmp.cpp:46:33: note: candidate function template not viable: no known conversion from 'constant::Q' to 'constant::Q &&' for 1st argument
  template<int N> constexpr int get(Q &&) { return N * N; }
                                ^
fatal error: too many errors emitted, stopping now [-ferror-limit=]
20 errors generated.
