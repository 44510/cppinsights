language: cpp
dist: bionic

cache:
  ccache: true
  directories:
    - $HOME/Library/Caches/Homebrew

common_sources: &all_sources
- sourceline: 'ppa:ubuntu-toolchain-r/test'
- sourceline: 'deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic main'
  key_url: 'https://apt.llvm.org/llvm-snapshot.gpg.key'

llvm_current_packages: &all_llvm_current_packages
- llvm-11-dev
- libclang-11-dev

jobs:
  include:

    # OSX clang 10 build
  - env: COMPILER='clang++' LLVM_CONFIG='llvm-config' LLVM_VERSION='10.0.0' COVERAGE='No' STATIC='No' DEBUG='No' UPLOAD='Yes' SKIP_TESTS='No' TIDY='No' SHACMD='shasum -a 256'
    os: osx
    name: "Clang 10 @ macOS Release"
    osx_image: xcode11.2
    compiler: clang

    #  - env: COMPILER='clang++' LLVM_CONFIG='llvm-config' LLVM_VERSION='10.0.0' COVERAGE='Yes' STATIC='No' DEBUG='Yes' UPLOAD='No' SKIP_TESTS='No' TIDY='No' SHACMD='shasum -a 256'
    #    os: osx
    #    name: "Clang 10 @ macOS Code Coverage & Debug"
    #    osx_image: xcode11.2
    #    compiler: clang

    # Linux Clang Build
  # - os: linux
  #   name: "Clang unstable @ Ubuntu"
  #   compiler: clang
  #   addons:
  #     apt:
  #       sources: *all_sources
  #       packages: 
  #       - clang-11
  #       - *all_llvm_current_packages
  #       - libstdc++-8-dev
  #   env: COMPILER='clang++-11' LLVM_CONFIG=${LLVM_CONFIG_CURRENT}  COVERAGE='No' STATIC='No' DEBUG='No' TIDY='No'

  # Clang stable deployment
  - os: linux
    name: "Clang 10 @ Ubuntu Release"
    services:
    - docker
    before_install:
    - docker pull andreasfertig/cppinsights-builder
    env: COMPILER='clang++-10' LLVM_CONFIG=/usr/bin/llvm-config-10  COVERAGE='No' DEPLOY='Yes' STATIC='Yes' DEBUG='No' UPLOAD='Yes' TIDY='No' SHACMD='sha256sum' USE_DOCKER='Yes'
    
  # Linux g++ Build
  # - os: linux
  #   name: "GCC 8 / LLVM unstable @ Ubuntu"
  #   compiler: gcc
  #   addons:
  #     apt:
  #       sources: *all_sources
  #       packages:
  #       - g++-8
  #       - *all_llvm_current_packages
  #   env: COMPILER='g++-8' LLVM_CONFIG=${LLVM_CONFIG_CURRENT} COVERAGE='No' STATIC='No' DEBUG='No' TIDY='No'

  # Linux g++ clang 10 build
  - os: linux
    name: "GCC 8 / LLVM 10 @ Ubuntu"
    compiler: gcc
    addons: &clang100
      apt:
        packages:
        - g++-8
        - llvm-10-dev
        - libclang-10-dev
        - clang-format-10
        - clang-tidy-10
        sources:
        - ubuntu-toolchain-r-test
        - llvm-toolchain-bionic-10
        - sourceline: 'deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-10 main'
          key_url: 'https://apt.llvm.org/llvm-snapshot.gpg.key'
    env: COMPILER='g++-8' LLVM_CONFIG='/usr/bin/llvm-config-10' COVERAGE='No' STATIC='No' DEBUG='No' TIDY='No'

  # Clang-tidy analysis
  - os: linux
    name: "GCC 8 / LLVM 10 @ Ubuntu clang-tidy check"
    compiler: gcc
    addons: *clang100
    env: COMPILER='g++-8' LLVM_CONFIG='/usr/bin/llvm-config-10' COVERAGE='No' STATIC='No' DEBUG='No' TIDY='Yes'

  # Clang-format check
  - os: linux
    name: "GCC 8 / LLVM 10 @ Ubuntu clang-format check"
    compiler: gcc
    addons: *clang100
    env: COMPILER='g++-8' LLVM_CONFIG='/usr/bin/llvm-config-10' COVERAGE='No' STATIC='No' DEBUG='No' TIDY='No' CFORMAT='Yes' CFORMAT_NAME='clang-format-10'

  # Debug build with coverage
  - os: linux
    name: "GCC 8 / LLVM 10 @ Ubuntu Code Coverage & Debug"
    # compiler: gcc
    # addons: &covcurrent
    #   apt:
    #     sources: *all_sources
    #     packages:
    #     - g++-8
    #     - libstdc++-8-dev
    #     - *all_llvm_current_packages
    #     - lcov
    # env: COMPILER='g++-8' LLVM_CONFIG=${LLVM_CONFIG_CURRENT} COVERAGE='Yes' STATIC='No' DEBUG='Yes' TIDY='No'
    services:
    - docker
    before_install:
    - docker pull andreasfertig/cppinsights-builder
    env: COMPILER='g++-8' LLVM_CONFIG=/usr/bin/llvm-config-10  COVERAGE='Yes' STATIC='No' DEBUG='Yes' TIDY='No' USE_DOCKER='Yes'

  - os: linux
    name: "GCC 8 / LLVM 10 @ Ubuntu Code Coverage"
    # compiler: gcc
    # addons: *covcurrent
    # env: COMPILER='g++-8' LLVM_CONFIG=${LLVM_CONFIG_CURRENT} STATIC='No' COVERAGE='Yes' DEBUG='No' TIDY='No'
    services:
    - docker
    before_install:
    - docker pull andreasfertig/cppinsights-builder
    env: COMPILER='g++-8' LLVM_CONFIG=/usr/bin/llvm-config-10  COVERAGE='Yes' STATIC='No' DEBUG='No' TIDY='No' USE_DOCKER='Yes'

  - os: linux
    name: "GCC 8 / LLVM 10 @ Ubuntu Code Coverage (libc++)"
    services:
    - docker
    before_install:
    - docker pull andreasfertig/cppinsights-builder
    env: COMPILER='g++-8' LLVM_CONFIG=/usr/bin/llvm-config-10  COVERAGE='Yes' STATIC='No' DEBUG='No' TIDY='No' USE_DOCKER='Yes' USE_LIBCPP='Yes'

  - stage: "Deploy Docker"
    install: true
    before_script: true
    script:
    - cd ${TRAVIS_BUILD_DIR}/
    - wget -c https://raw.githubusercontent.com/andreasfertig/travisci-trigger-build/master/trigger_travisci_build.sh
    - |
      if [[ "${TRAVIS_BRANCH}" = "master" ]] && [[ "${TRAVIS_PULL_REQUEST}" == "false" ]]; then
        bash trigger_travisci_build.sh > /dev/null
      fi  
    after_success: true
    before_deploy: true
    env: COMPILER='clang++-10' LLVM_CONFIG=/usr/bin/llvm-config-10  COVERAGE='No' DEPLOY='No' STATIC='No' DEBUG='No' UPLOAD='No' TIDY='No' SHACMD='sha256sum' DOCKER_UPLOAD='Yes'
    os: linux
    name: "Final deploy to DockerHub"
    
    #before_install:
    #- set -e # Fail the whole script whenever any command fails

install:
- |   
  if [[ "${TRAVIS_OS_NAME}" == "osx" ]]; then
    export HOMEBREW_NO_AUTO_UPDATE=1
    brew update > /dev/null
    brew install cmake || brew upgrade cmake
    brew install xz || brew upgrade xz
    brew install lcov || brew upgrade lcov

    brew install ccache
    export PATH="/usr/local/opt/ccache/libexec:$PATH"

    mkdir ${TRAVIS_BUILD_DIR}/clang
    cd ${TRAVIS_BUILD_DIR}/clang
    wget -q --continue --directory-prefix=$HOME/Library/Caches/Homebrew https://github.com/andreasfertig/cppinsights-compiler-binaries/releases/download/${LLVM_VERSION}/clang+llvm-${LLVM_VERSION}-x86_64-apple-darwin.tar.xz

    mkdir current
    tar -xJf $HOME/Library/Caches/Homebrew/clang+llvm-${LLVM_VERSION}-x86_64-apple-darwin.tar.xz -C current --strip-components 1    
    # Temporary fix for image: xcode11 to use GCC.
    travis_retry $TRAVIS_BUILD_DIR/scripts/travis-install-macos-commandline-tools.sh
  fi
- |
  if [[ "${UPLOAD}" = "Yes" ]]; then
    npm install github-release-notes -g
  fi
    
before_script:
  - |
    if [[ "${TRAVIS_OS_NAME}" == "osx" ]]; then
        export PATH=${TRAVIS_BUILD_DIR}/clang/current/bin:$PATH
    fi
  - export CXX=${COMPILER}
  - cd "${TRAVIS_BUILD_DIR}"
  - mkdir build
  - cd build
  - |
    if [[ "${USE_DOCKER}" == "Yes" ]]; then
      docker run -v ${TRAVIS_BUILD_DIR}:/home/builder --rm andreasfertig/cppinsights-builder /bin/bash -c "cd /home/builder/build && cmake -G Ninja -DINSIGHTS_STATIC=${STATIC} -DDEBUG=${DEBUG} -DINSIGHTS_COVERAGE=${COVERAGE} -DINSIGHTS_USE_LIBCPP=${USE_LIBCPP} .."
    elif [[ "${CFORMAT}" == "Yes" ]]; then
      echo "Nothing to do here for the clang-format check run."
    else
      cmake -DINSIGHTS_LLVM_CONFIG=${LLVM_CONFIG} -DINSIGHTS_COVERAGE=${COVERAGE} -DINSIGHTS_STATIC=${STATIC} -DDEBUG=${DEBUG} -DINSIGHTS_TIDY=${TIDY} ..
    fi

script:
- |
  if [[ "${USE_DOCKER}" == "Yes" ]]; then
    docker run -v ${TRAVIS_BUILD_DIR}:/home/builder --rm andreasfertig/cppinsights-builder /bin/bash -c "cmake --build /home/builder/build"

    if [[ "${DEPLOY}" == "Yes" ]]; then
      mkdir ${TRAVIS_BUILD_DIR}/build/html
      docker run -v ${TRAVIS_BUILD_DIR}:/home/builder --rm andreasfertig/cppinsights-builder /bin/bash -c "cmake --build /home/builder/build --target doc"
      echo "docs.cppinsights.io" > ${TRAVIS_BUILD_DIR}/build/html/CNAME
      echo "google-site-verification: google7bcf3ef9a4f62ff2.html" > ${TRAVIS_BUILD_DIR}/build/html/google7bcf3ef9a4f62ff2.html 
    fi
  elif [[ "${TIDY}" == "Yes" ]]; then
    $TRAVIS_BUILD_DIR/scripts/travis-run-make-tidy.sh
  elif [[ "${CFORMAT}" == "Yes" ]]; then
    cd $TRAVIS_BUILD_DIR && $TRAVIS_BUILD_DIR/scripts/travis-clang-format-check.sh $CFORMAT_NAME
  else
    make -j 2
  fi
- |
  if [[ "${TRAVIS_OS_NAME}" == "osx" ]] && [[ "${SKIP_TESTS}" == "No" ]]; then
    make tests
  fi  
- |
  if [[ "${TRAVIS_OS_NAME}" == "osx" ]] && [[ "${TRAVIS_BRANCH}" = "master" ]]; then
      export BIN_FILE_NAME=${TRAVIS_BUILD_DIR}/insights-macos
  fi
- |
  if [[ "${TRAVIS_OS_NAME}" == "linux" ]] && [[ "${TRAVIS_BRANCH}" = "master" ]]; then
      export BIN_FILE_NAME=${TRAVIS_BUILD_DIR}/insights-ubuntu-14.04
  fi
- |
  if [[ "${COVERAGE}" == "Yes" ]]; then
    # Creating report
    cd ${TRAVIS_BUILD_DIR}/build

    if [[ "${USE_DOCKER}" == "Yes" ]]; then
        docker run -v ${TRAVIS_BUILD_DIR}:/home/builder --rm andreasfertig/cppinsights-builder /bin/bash -c "cmake --build /home/builder/build --target coverage"
    else
        make coverage -j 2
    fi

    if [ ! -f ${TRAVIS_BUILD_DIR}/build/filtered.info ]; then
      echo -e "\033[1;31mlcov did not create filtered.info!\033[0m"
      exit 1;
    fi

    if [ ! -s ${TRAVIS_BUILD_DIR}/build/filtered.info ]; then
      echo -e "\033[1;31mlcov did create an empty filtered.info!\033[0m"
      exit 1;
    fi

    # Uploading report to CodeCov
    bash <(curl -s https://codecov.io/bash) -f ${TRAVIS_BUILD_DIR}/build/filtered.info || echo "Codecov did not collect coverage reports"
  fi  

after_success:
- |
  if [[ "${TRAVIS_BRANCH}" = "master" ]] && [[ "${TRAVIS_PULL_REQUEST}" == "false" ]] && [[ "${UPLOAD}" = "Yes" ]]; then
      cd ${TRAVIS_BUILD_DIR}/build/
      wget -c https://raw.githubusercontent.com/andreasfertig/uploadtool/27066299131e9af259821bdc4508c8469eb1997c/upload.sh
      export GZ_FILE_NAME=${BIN_FILE_NAME}.tar.gz
      export HASH_GZ_FILE_NAME=${GZ_FILE_NAME}.sha256
      export HASH_FILE_NAME=${BIN_FILE_NAME}.sha256
      ${SHACMD} ${TRAVIS_BUILD_DIR}/build/insights | cut -d ' ' -f 1 > ${HASH_FILE_NAME}
      export BIN_HASH=$(cat ${HASH_FILE_NAME})
      echo "C++ Insights sha256: ${BIN_HASH}"
      tar -czf ${GZ_FILE_NAME} -C ${TRAVIS_BUILD_DIR}/build insights ${HASH_FILE_NAME}
      ${SHACMD} ${GZ_FILE_NAME} | cut -d ' ' -f 1 > ${HASH_GZ_FILE_NAME}
      bash upload.sh ${GZ_FILE_NAME} ${HASH_GZ_FILE_NAME} ${HASH_FILE_NAME}
      cd ${TRAVIS_BUILD_DIR} && gren release --override --username=andreasfertig --repo=cppinsights -t `git tag --sort=-creatordate | grep -v continuous | head -n 1 `..continuous -c .github/grenrc.json  -P
  fi

branches:
  except:
  - /^(?i:continuous)$/

deploy:
- provider: pages
  strategy: git
  cleanup: false
  keep_history: true
  local_dir: build/html
  token: $GITHUB_TOKEN
  repo: andreasfertig/andreasfertig.github.io
  target_branch: master
  on:
    branch: master
    condition: $DEPLOY = Yes
#
env:
  global:
  - LLVM_CONFIG_CURRENT='/usr/bin/llvm-config-11'
  - secure: g6rm6GwWwbMe70xa25WHNvZ5NepGwda9F2e3R9iIr+EUTT/1zvZATTJfeNxt6YSCUKrxkRgO7MchjpngmVeP2bIC/0XCiiCfb46ENcINCRHxQ7jHmKIxDJypUK6rTiqsleprfGLFJ9jBUj4nEUzu0+N6EPC0hAzM5WeCZxitOifzPrs9L8/ATGJ2xvpazgkrVs0+Onv6Zn2O8XsoVaYZpUXHGIqXpZWTAyUnvRG3z/LInU7dyoiSgnoEAlruXUf+OuOAKOmiIaLBBsnyXsR2cS/kXcoQZNeTmxMjyguhC3c77OJxQ0dzJgN3pWznMNZ+Va5cetpM+P8wyeqXaVTxlLwCuj0KB8gsGKDfzHno8MHcbw71eV3/9laVmxZyOAQgeQVEj8vuclcaFIvbPMUtCGahlgPCr1l8gTVrgzdtJyEK0nf/Tk0LBS+5gvHg1aYIg6G9iqvX4oodJ8mH5RCTibWP/yOP65B5MmU/FNHFmeM4qREPWiclE351SrsraSUZ9H2onoaLBnDnNiHrr9OWaKD6BEKh66MxKS1u+Gi3Bb/xhK86JXtfq4K6OiQggbBPk/JPczn07czssAesu/gnMMuXSbkJc0m1YMBt0PtUoX4/bzTgTw485wVkBxeQYby7Q+7/vc5HKjl7OQqE73kctXWlhCuTzdF1wvcALu5oF78=
