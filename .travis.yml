language: cpp
sudo: false

cache:
  ccache: true
  directories:
    - $HOME/Library/Caches/Homebrew

common_sources: &all_sources
- ubuntu-toolchain-r-test
- llvm-toolchain-trusty

llvm_current_packages: &all_llvm_current_packages
- llvm-9-dev
- libclang-9-dev

llvm_7_sources: &all_llvm_7_sources
- ubuntu-toolchain-r-test

llvm_7_packages: &all_llvm_7_packages
- clang-7
- llvm-7-dev
- libclang-7-dev


matrix:
  include:

    # 1/ OSX Builds
  - env: COMPILER='clang++' COMPILER_CC='clang' LLVM_CONFIG='llvm-config' LLVM_VERSION='7.0.0' COVERAGE='No' STATIC='No' DEBUG='No' UPLOAD='No' SKIP_TESTS='No' TIDY='No'
    os: osx
    osx_image: xcode9.3
    compiler: clang
      
    # Linux Clang Build
  - os: linux
    compiler: clang
    addons:
      apt:
        sources: *all_sources
        packages: 
        - clang-9
        - *all_llvm_current_packages
        - libstdc++-7-dev
    env: COMPILER='clang++-9' COMPILER_CC='clang-9' LLVM_CONFIG=${LLVM_CONFIG_CURRENT}  COVERAGE='No' STATIC='No' DEBUG='No' TIDY='No'

  # Clang stable deployment
  - os: linux
    sudo: required
    services:
    - docker
    addons:
      ssh_known_hosts: cppinsights.io
    before_install:
    - cd docker_travis && docker build -t cppinsights-travis .
    env: COMPILER='clang++-7' COMPILER_CC='clang-7' LLVM_CONFIG=/usr/bin/llvm-config-7  COVERAGE='No' DEPLOY='Yes' STATIC='Yes' DEBUG='No' UPLOAD='Yes' TIDY='No'
    
  # Linux g++ Build
  - os: linux
    compiler: gcc
    addons:
      apt:
        sources: *all_sources
        packages:
        - g++-8
        - *all_llvm_current_packages
    env: COMPILER='g++-8' COMPILER_CC='gcc-8' LLVM_CONFIG=${LLVM_CONFIG_CURRENT} COVERAGE='No' STATIC='No' DEBUG='No' TIDY='No'

  # Debug build with coverage
  - os: linux
    compiler: gcc
    addons:
      apt:
        sources: *all_sources
        packages:
        - g++-8
        - *all_llvm_current_packages
    env: COMPILER='g++-8' COMPILER_CC='gcc-8' LLVM_CONFIG=${LLVM_CONFIG_CURRENT} COVERAGE='Yes' STATIC='No' DEBUG='Yes' TIDY='No'

  # Clang-tidy analysis
  - os: linux
    compiler: gcc
    addons:
      apt:
        sources: *all_sources
        packages:
        - g++-8
        - clang-tidy-9
        - *all_llvm_current_packages
    env: COMPILER='g++-8' COMPILER_CC='gcc-8' LLVM_CONFIG=${LLVM_CONFIG_CURRENT} COVERAGE='No' STATIC='No' DEBUG='No' TIDY='Yes'

    # Linux Clang Coverage Build
  - os: linux
    compiler: gcc
    addons:
      apt:
        sources: *all_sources
        packages:
        - g++-7
        - libstdc++-6-dev
        - *all_llvm_current_packages
        - lcov
    env: COMPILER='g++-7' COMPILER_CC='gcc-7' LLVM_CONFIG=${LLVM_CONFIG_CURRENT} STATIC='No' COVERAGE='Yes' DEBUG='No' TIDY='No'

install:
- |   
  if [[ "${TRAVIS_OS_NAME}" == "osx" ]]; then
    export HOMEBREW_NO_AUTO_UPDATE=1
    brew update > /dev/null
    brew install cmake || brew upgrade cmake
    brew install xz || brew upgrade xz

    brew install ccache
    export PATH="/usr/local/opt/ccache/libexec:$PATH"

    mkdir ${TRAVIS_BUILD_DIR}/clang
    cd ${TRAVIS_BUILD_DIR}/clang
    wget -q --continue --directory-prefix=$HOME/Library/Caches/Homebrew https://releases.llvm.org/${LLVM_VERSION}/clang+llvm-${LLVM_VERSION}-x86_64-apple-darwin.tar.xz

    mkdir current
    tar -xJf $HOME/Library/Caches/Homebrew/clang+llvm-${LLVM_VERSION}-x86_64-apple-darwin.tar.xz -C current --strip-components 1
  fi
    
before_script:
  - |
    if [[ "${TRAVIS_OS_NAME}" == "osx" ]]; then
        export PATH=${TRAVIS_BUILD_DIR}/clang/current/bin:$PATH
    fi
  - export CXX=${COMPILER}
  - export CC=${COMPILER_CC}
  - cd "${TRAVIS_BUILD_DIR}"
  - mkdir build
  - cd build
  - |
    if [[ "${DEPLOY}" == "Yes" ]]; then
      docker run -v ${TRAVIS_BUILD_DIR}:/home/builder --rm cppinsights-travis /bin/bash -c "cd /home/builder/build && cmake -G Ninja -DINSIGHTS_STATIC=Yes .."
    else
      cmake -DINSIGHTS_LLVM_CONFIG=${LLVM_CONFIG} -DINSIGHTS_COVERAGE=${COVERAGE} -DINSIGHTS_STATIC=${STATIC} -DDEBUG=${DEBUG} -DINSIGHTS_TIDY=${TIDY} ..
    fi

script:
- |
  if [[ "${DEPLOY}" == "Yes" ]]; then
    docker run -v ${TRAVIS_BUILD_DIR}:/home/builder --rm cppinsights-travis /bin/bash -c "cmake --build /home/builder/build"
    mkdir ${TRAVIS_BUILD_DIR}/build/html
    docker run -v ${TRAVIS_BUILD_DIR}:/home/builder --rm cppinsights-travis /bin/bash -c "cmake --build /home/builder/build --target doc"
    echo "docs.cppinsights.io" > ${TRAVIS_BUILD_DIR}/build/html/CNAME
  elif [[ "${TIDY}" == "Yes" ]]; then
    make -j4 2>&1 | tee output.txt
  else
    make -j 2
  fi
- |
  if [[ "${TRAVIS_OS_NAME}" == "osx" ]] && [[ "${SKIP_TESTS}" == "No" ]]; then
    make tests
  fi  
- |
  if [[ "${TRAVIS_OS_NAME}" == "osx" ]] && [[ "${TRAVIS_BRANCH}" = "master" ]]; then
      export GZ_FILE_NAME=${TRAVIS_BUILD_DIR}/insights-macos.tar.gz
  fi
- |
  if [[ "${TRAVIS_OS_NAME}" == "linux" ]] && [[ "${TRAVIS_BRANCH}" = "master" ]]; then
      export GZ_FILE_NAME=${TRAVIS_BUILD_DIR}/insights-ubuntu-14.04.tar.gz
  fi
  
after_success:
- |
  if [[ "${COVERAGE}" == "Yes" ]]; then
    # Creating report
    cd ${TRAVIS_BUILD_DIR}/build

    make coverage -j 2

    # Uploading report to CodeCov
    bash <(curl -s https://codecov.io/bash) -f ${TRAVIS_BUILD_DIR}/build/filtered.info || echo "Codecov did not collect coverage reports"
  fi
- |
  if [[ "${TRAVIS_BRANCH}" = "master" ]] && [[ "${UPLOAD}" = "Yes" ]]; then
      cd ${TRAVIS_BUILD_DIR}/build/
      wget -c https://raw.githubusercontent.com/probonopd/uploadtool/27acba5793df031bd0884b2e0a31b4692332b7ba/upload.sh
      tar -czf ${GZ_FILE_NAME} -C ${TRAVIS_BUILD_DIR}/build insights
      bash upload.sh ${GZ_FILE_NAME}
  fi

branches:
  except:
  - /^(?i:continuous)$/

before_deploy:
- openssl aes-256-cbc -K $encrypted_71e42633e801_key -iv $encrypted_71e42633e801_iv -in $TRAVIS_BUILD_DIR/scripts/deploy_rsa.enc -out /tmp/deploy_rsa -d
- eval "$(ssh-agent -s)"
- chmod 600 /tmp/deploy_rsa
- ssh-add /tmp/deploy_rsa
  
deploy:
- provider: script
  skip_cleanup: true
  script: scp $TRAVIS_BUILD_DIR/build/insights ${SCP_CRED}
  on:
    branch: master
    condition: $DEPLOY = Yes
- provider: pages
  skip-cleanup: true
  keep-history: true
  local-dir: build/html
  github-token: $GITHUB_TOKEN
  repo: andreasfertig/andreasfertig.github.io
  target-branch: master
  on:
    branch: master
    condition: $DEPLOY = Yes
#
env:
  global:
  - LLVM_CONFIG_CURRENT='/usr/bin/llvm-config-9'
  - secure: MI6S+9up0JKkDxrW7b248Ro7auyyVogdwSj/UsTLNTKMBwNOaK4HccDNif6K2qAJmTlGt1xFHh0cHXvTkACcUc8hvZghJVGUOOCaWK9YvwR8wwQgoFi034BjG/Tg7Uj6WX6G65mv0UVv/2dxZRghDTujCnFiZOoSpApBvqFjQ/gamP7P+vjJiWQVJWJTOhYHz/oK6jQHMMlNeRJbzZhp/kgo7LPtdGZVT95+S6Xn3rHIuj5pJdgwYf/NFckWI9rkkkqn47XqYozGf5HHnBlcZEDCdGEQzI8HDngRC5mjejEMCKd2mBJP319xO8UDesplpabzZhAqucskKynVK9lqFlHtdYn7dvSLXHUF9oPAWoMckxDmNIBqarEy5kYZG+ccRm4xmP2V7JAfGpW7HAtLycXEHs5Fxf839IfyTHMIp6fF+a/t2M6SE/m4rZ3Ser7Y09EAeGqUKgvc/YQwkSSdrRxE1bMIfHES6/IRdSMGkAOa1U74ulqN3FzdfKX2Ng93EZ15zXiHqipljmlPDiC8BFXG3VEbFMubKBuvB8c5KjlpwuU5Udk9cehGWDLDcKi0K7PZpZ1p2l1aU17y8QxFEcOUw6Q/nYbZ9gEf7eF5DrpycSyv6xpGyYq59LrL5m5/XUAQ9ZLN+92rQlMXZqRncMll2ZJX5Tzb+PeO8P1y7mA=
  - secure: CFbIrswqs8U7pCMnF57QrC/KgNlybr5SNFlKE9BHA9I9WXcjLBGm3tv9JM7TvzwD5ivhe9P/MVcc1ROaTSPVRSdOI9aQuNBauDYoab1OrlO0SFnHjr6tKzvw9P+wnfuyawhH8vm6m/cdyyIKagFUKtFSKUnpLeakTEUUG6O9IBLHzBa0BTqlmviV9OjDUjD61adUSWVWe96T6A/tlGyFAWAYuAU1jvGN9HSE06mFlGC0NmbT25kq/8SGv9+9KoGgXNFB6lsQ6C5C3cWIlsaO0EtTnLGa2IfSZk4lg4CzZ97CGcraH5avrG5guSDWUGZEe8a+rxA42SvrhKVRDhu3qz0agH1BlXi+0q7k8oS7wAaRG63sjyD0DtFlA783bQmdLXh/BY5rz1FsqV9rr8qVdfo+5cVfW6sOZLrNeyF8OcxWAln5SNiuLpAb2cYTGNJ15J0KLynYBL/6e3Qe6gsUS4BIHFORr9dHMXA3TBnqEIo4hzJwnGNDixs7rLXCmdX3uxsAHUJEtSxm63AiCNvZhWq6Lm+Lf1CKQ9mNRzUT3IQGwuhCmv6XFR/ZTCFCiXwwC6lTy1ItC6c/90quMZpdxTcUVts6JmMI6i86bJgKrx4dzHpZmYkQ4D+r9LpqAOm1IgDlACZnCIjgHbTh6VOjNpU3jonzN1mHNxDP8Ezgjss=
  - secure: g6rm6GwWwbMe70xa25WHNvZ5NepGwda9F2e3R9iIr+EUTT/1zvZATTJfeNxt6YSCUKrxkRgO7MchjpngmVeP2bIC/0XCiiCfb46ENcINCRHxQ7jHmKIxDJypUK6rTiqsleprfGLFJ9jBUj4nEUzu0+N6EPC0hAzM5WeCZxitOifzPrs9L8/ATGJ2xvpazgkrVs0+Onv6Zn2O8XsoVaYZpUXHGIqXpZWTAyUnvRG3z/LInU7dyoiSgnoEAlruXUf+OuOAKOmiIaLBBsnyXsR2cS/kXcoQZNeTmxMjyguhC3c77OJxQ0dzJgN3pWznMNZ+Va5cetpM+P8wyeqXaVTxlLwCuj0KB8gsGKDfzHno8MHcbw71eV3/9laVmxZyOAQgeQVEj8vuclcaFIvbPMUtCGahlgPCr1l8gTVrgzdtJyEK0nf/Tk0LBS+5gvHg1aYIg6G9iqvX4oodJ8mH5RCTibWP/yOP65B5MmU/FNHFmeM4qREPWiclE351SrsraSUZ9H2onoaLBnDnNiHrr9OWaKD6BEKh66MxKS1u+Gi3Bb/xhK86JXtfq4K6OiQggbBPk/JPczn07czssAesu/gnMMuXSbkJc0m1YMBt0PtUoX4/bzTgTw485wVkBxeQYby7Q+7/vc5HKjl7OQqE73kctXWlhCuTzdF1wvcALu5oF78=

